import numpy as np  # подключение библиотеки NumPy под псевдонимом np
import matplotlib.pyplot as plt  # подключение библиотеки PyPlot под псевдонимом plt


# Главная функция лабораторной работы
def main():
    ## 1. Создание массивов в NumPy
    print('\nЧасть 1. Создание массивов')
    d1 = d2 = d3 = d4 = d5 = d6 = d7 = np.array([])
    # ------ добавьте свой код --------
    # Создайте: d1 - матрицу 2х3 (строк 2, столбцов 3), заполненную значениями от 1 до 6
    d1 = np.array([[1, 2, 3], [4, 5, 6]])  # пример выполнения
    # Создайте: d2 - матрицу 3х2, заполненную нулями
    d2 = np.array([[1, 2], [3, 4], [5, 6]])
    # Создайте: d3 - матрицу 2х2, заполненную единицами
    d3 = np.array([[1, 1], [1, 1]])
    # Создайте: d4 - единичную матрицу 2х2
    d4 = np.eye(2)
    # Создайте: d5 - массив длиной 200 (горизонтальный вектор 1х200), заполненный значениями от 1 до 200
    d5 = np.linspace(1, 200, 200, dtype=int)
    # Создайте: d6 - массив длиной 10000, заполненный случайными целыми числами от -10 до 10
    d6 = np.random.randint(-10, 11, size=10000)
    # Создайте: d7 - матрицу 100х100, заполненную случайными целыми числами от -2 до 2
    d7 = np.random.randint(-2, 3, (100, 100))
    # ---------------------------------
    print('d1: Размер:', d1.shape, 'Сумма:', np.sum(d1), 'Ожидаемый размер: (2, 3) Сумма: 21')
    print('d2: Размер:', d2.shape, 'Сумма:', np.sum(d2), 'Ожидаемый размер: (3, 2) Сумма: 21')
    print('d3: Размер:', d3.shape, 'Сумма:', np.sum(d3), 'Ожидаемый размер: (2, 2) Сумма: 4')
    print('d4: Размер:', d4.shape, 'Сумма:', np.sum(d4), 'Диагональ:', np.sum(np.diagonal(d4)),'Ожидаемый размер: (2, 2) Сумма: 2 Диагональ: 2')
    print('d5: Размер:', d5.shape, 'Сумма:', np.sum(d5), 'Ожидаемый размер: (200, ) Сумма: 20100')
    print('d6: Размер:', d6.shape, 'Среднее:', np.mean(d6), 'Ожидаемый размер: (10000, ) Среднее: 0.0±0.1')
    print('d7: Размер:', d7.shape, 'Среднее:', np.mean(d7), 'Ст.откл.:', np.std(d7), 'Ожидаемый размер: (100, 100) Среднее: 0.0±0.1 Ст.откл.: 1.15±0.02')

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # После выполнения предыдущего шага удалите или закомментируйте (символ #) следующую строку для продолжения работы
    #return

    ## 2. Размеры, индексация, срезы и копирование
    print('\nЧасть 2. Размеры, индексация, срезы и копирование')
    d1 = d2 = d4 = d5 = np.array([])
    d3 = np.arange(1, 21)
    # ------ добавьте свой код --------
    # Создайте: d1 - матрицу 4х4, заполненную нулями
    d1 = np.zeros((4, 4), float)
    # Создайте: d2 - матрицу 4х4, заполненную единицами
    d2 = np.ones((4, 4), float)
    # Замените в d2 второй столбец на второй столбец матрицы d1 и вторую строку на вторую строку из d1
    d2[:, 1] = d1[:, 1]
    d2[1, :] = d1[1, :]
    # d3 - массив из 20 чисел, превратите его в матрицу 5х4 и сохраните в переменной d4
    d3 = np.linspace(1, 20, 20, dtype=float)
    d4 = d3.reshape(5, 4)
    # Добавьте к матрице d4 слева столбец из единиц и сохраните в переменной d5
    column = np.ones((5, 1))
    d5 = np.hstack((column, d4))
    # ---------------------------------
    print('Получен d2:')
    print(d2)
    print('Ожидаемый d2:')
    print('[[1. 0. 1. 1.]')
    print(' [0. 0. 0. 0.]')
    print(' [1. 0. 1. 1.]')
    print(' [1. 0. 1. 1.]]')
    print('Получен d5:')
    print(d5)
    print('Ожидаемый d5:')
    print('[[ 1.  1.  2.  3.  4.]')
    print(' [ 1.  5.  6.  7.  8.]')
    print(' [ 1.  9. 10. 11. 12.]')
    print(' [ 1. 13. 14. 15. 16.]')
    print(' [ 1. 17. 18. 19. 20.]]')

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # После выполнения предыдущего шага удалите или закомментируйте (символ #) следующую строку для продолжения работы
    #return

    ## 3. Логические условия
    print('\nЧасть 3. Логические условия')
    d1 = d2 = np.array([])
    # ------ добавьте свой код --------
    # Создайте: d1 - матрицу 4х5, заполненную числами от 1 до 20
    d1 = np.arange(1, 21).reshape(4, 5)
    # Создайте: d2 - массив из всех элементов d1, которые больше или равны 3 и меньше или равны 13
    d2 = d1[(d1 >= 3) & (d1 <= 13)]
    # ---------------------------------
    print('Получен d2:')
    print(d2)
    print('Ожидаемый d2:')
    print('[ 3  4  5  6  7  8  9 10 11 12 13]')

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # После выполнения предыдущего шага удалите или закомментируйте (символ #) следующую строку для продолжения работы
    #return

    ## 4. Функции
    print('\nЧасть 4. Функции')
    d1 = d2 = np.array([])
    d1m = d1s = d2m = d2s = .0
    # ------ добавьте свой код --------
    # Создайте: d1 - массив из 1000 случайных целых чисел в диапазоне от 1 до 3, 
    # вычислите среднее значение элементов массива и сохраните в переменной d1m, 
    # вычислите среднее значение элементов массива и сохраните в переменной d1s
    d1 = np.random.randint(1, 4, size=1000)
    d1m = np.mean(d1)
    d1s = np.std(d1)
    # Создайте: d2 - матрицу 100х100 действительных чисел в диапазоне от 5 до 7,
    # вычислите среднее значение элементов матрицы и сохраните в переменной d2m, 
    # вычислите среднее значение элементов матрицы и сохраните в переменной d2s
    d2 = 2 * np.random.rand(100, 100) + 5
    d2m = np.mean(d2)
    d2s = np.std(d2)
    # ---------------------------------
    print('Получены d1m:', d1m, 'd1s:', d1s)
    print('Ожидаемые d1m: 2.0±0.1 d1s: 0.8±0.1')
    print('Получены d2m:', d2m, 'd2s:', d2s)
    print('Ожидаемые d2m: 6.0±0.1 d2s: 0.5±0.1')

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # После выполнения предыдущего шага удалите или закомментируйте (символ #) следующую строку для продолжения работы
    #return

    ## 5. Линейная алгебра
    print('\nЧасть 5. Линейная алгебра')
    dr1 = dr2 = dr3 = dr4 = np.array([])
    # ------ добавьте свой код --------
    d1 = np.array([2, 4, 3])
    dr1 = 2 * d1

    d1 = np.array([[1, 2, 3], [3, 2, 1]])
    d2 = np.array([[6], [5], [4]])
    dr2 = d1 @ d2

    d1 = np.array([1, 2])
    d2 = np.array([[3], [4]])
    dr3 = d1 @ d2

    d1 = np.array([[1, 3], [2, 4], [5, 1]])
    d2 = np.array([[3], [2]])
    d3 = np.array([3, 2, 1]).reshape((1, -1))
    I = np.eye(3)
    dr4 = 2 * d1 @ d2 @ d3 + I - 10
    # ---------------------------------
    print('Получен dr1:')
    print(dr1)
    print('Ожидаемыей dr1:')
    print('[4 8 6]')
    print('Получен dr2:')
    print(dr2)
    print('Ожидаемыей dr2:')
    print('[[28]')
    print(' [32]]')
    print('Получен dr3:')
    print(dr3)
    print('Ожидаемыей dr3:')
    print('11')
    print('Получен dr4:')
    print(dr4)
    print('Ожидаемыей dr4:')
    print('[[45. 26.  8.]')
    print(' [74. 47. 18.]')
    print(' [92. 58. 25.]]')

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # После выполнения предыдущего шага удалите или закомментируйте (символ #) следующую строку для продолжения работы
    #return

    ## 6. Построение графиков функций
    print('\nЧасть 6. Построение графиков функций')
    # ------ добавьте свой код --------
    t = np.linspace(-6, 6, 100)
    y = 1 / (1 + np.exp(-t))
    plt.plot(t, y)
    plt.title('График сигмоиды')
    plt.xlabel('z')
    plt.ylabel('g(z)')
    plt.show()
    # ---------------------------------


if __name__ == '__main__':
    main()  # Вызов главной функции
    input('Перейдите в терминал и нажмите Enter для завершения')  # Ожидание нажатия от пользователя

